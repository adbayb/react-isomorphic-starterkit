const path = require("path");
const webpack = require("webpack");
const merge = require("webpack-merge");
const HtmlWebpackPlugin = require("html-webpack-plugin");

// TODO: https://github.com/mrsteele/dotenv-webpack

// __ROOT_DIR__ represents the absolute path relative to package.json:
const __ROOT_DIR__ = path.resolve(__dirname, "../");

// cf. https://webpack.js.org/ for webpack documentation:
const base = {
	// context represents the base directory for resolving entry points and loaders from configuration
	// Even if context is defined, all config cannot be set via a relative path to context (like output.path that must be an absolute path).
	// By default context uses the current directory on which config is set.
	// But it's recommended to pass a value like the root package.json dir;
	// This makes the configuration independent from CWD:
	context: __ROOT_DIR__,
	module: {
		rules: [
			{
				test: /\.js[x]?$/,
				// We make sure that babel-loader is transforming as few files as possible:
				// No needs to re-transform already transformed production ready modules
				// (e.g inside node_modules):
				exclude: /node_modules/,
				use: {
					loader: "babel-loader",
					options: {
						// This will cache transformations to the filesystem
						// resulting in a speed up for next transformations:
						cacheDirectory: true
					}
				}
			},
			{
				test: /\.(jp[e]?g|png|gif|svg|ico|eot|ttf|woff|woff2|otf)$/i,
				use: {
					loader: "file-loader",
					options: {
						name: "assets/[name].[hash].[ext]"
						// TODO emitFile for server side https://github.com/webpack-contrib/file-loader#emitfile
					}
				}
			}
		]
	},
	resolve: {
		alias: {
			// alias for webpack config folder to avoid confusion with webpack npm module:
			webpackConfig: path.join(__ROOT_DIR__, "./webpack")
		},
		modules: [__ROOT_DIR__, path.join(__ROOT_DIR__, "./src"), "node_modules"],
		extensions: [".js", ".jsx"]
	}
};

const baseDev = {
	plugins: [
		// The DefinePlugin allows to create global constants that are replaced
		// by their values at compile time. It's like prepack but for constants in webpack ;)
		// For example, if we define __DEV__: true, and in the App.js we have console.log(__DEV__)
		// The bundle code of App.js will result with console.log(true):
		new webpack.DefinePlugin({
			// cf. explanation why DefinePlugin needs to wrap value in JSON.stringify;
			// https://stackoverflow.com/questions/39564802/why-does-webpacks-defineplugin-require-us-to-wrap-everything-in-json-stringify
			// https://webpack.js.org/plugins/define-plugin/#usage
			__DEV__: JSON.stringify(true),
			"process.env.NODE_ENV": JSON.stringify("development")
		})
	]
};

const baseProd = {
	plugins: [
		new webpack.DefinePlugin({
			__DEV__: JSON.stringify(false),
			"process.env.NODE_ENV": JSON.stringify("production")
		}),
		new webpack.optimize.UglifyJsPlugin({
			compress: {
				warnings: false
			},
			sourceMap: true
		})
	]
};

const cssLoaders = [
	{
		loader: "css-loader",
		// TODO css-loader/locals for server side https://github.com/dferber90/fake-style-loader/issues/3
		options: {
			modules: true,
			minimize: true,
			importLoaders: 1,
			localIdentName: "[name]__[local]___[hash:base64:5]"
		}
	},
	{
		loader: "postcss-loader",
		options: {
			plugins: [
				// postcss-cssnext already includes postcss-nested:
				// same for autoprefixer
				// see. http://cssnext.io/features/
				require("postcss-cssnext")({
					// autoprefixer browsers env:
					browsers: ["> 1%", "last 2 versions"]
				})
			]
		}
	}
];

const baseClient = merge(
	{
		name: "client",
		target: "web",
		entry: {
			// The key is the chunk name. The value can be a string or an array.
			// But for merging purpose, I used to give an array as value to allow webpack-merge
			// to easily merge value into the array (for hmr entries for example).
			app: ["./bootstrap/client"]
		},
		output: {
			path: path.join(__ROOT_DIR__, "./dist/public")
		},
		plugins: [
			new webpack.DefinePlugin({
				__BROWSER__: JSON.stringify(true),
				__NODE__: JSON.stringify(false)
			}),
			new HtmlWebpackPlugin({
				template: "./public/template.html",
				favicon: "./public/favicon.ico",
				minify: {
					removeComments: false,
					collapseWhitespace: true,
					preserveLineBreaks: false
				}
			})
		]
	},
	base
);

const baseServer = merge(
	{
		name: "server",
		target: "node",
		node: {
			// cf. https://webpack.js.org/configuration/node/#node-__dirname
			// __dirname: false; allows to overwrite default behavior of __dirname
			// constants when __dirname is called inside a bundle generated by webpack
			// By default, it takes the "mock" value which corresponds to "/". By setting it to
			// true, __dirname is relative to the file which calls __dirname :)
			__dirname: true
		},
		externals: [
			/^[a-z\-0-9]+$/,
			{
				"react-dom/server": true // TODO check with react 16
			}
		],
		entry: {
			app: ["./bootstrap/server"]
		},
		output: {
			filename: "[name].js",
			path: path.join(__ROOT_DIR__, "./dist/server"),
			libraryTarget: "commonjs2"
		},
		plugins: [
			new webpack.DefinePlugin({
				__BROWSER__: JSON.stringify(false),
				__NODE__: JSON.stringify(true)
			})
		]
	},
	base
);

module.exports = {
	baseDev,
	baseProd,
	baseClient,
	baseServer,
	cssLoaders
};
