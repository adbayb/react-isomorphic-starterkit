const path = require("path");
const merge = require("webpack-merge");
const HtmlWebpackPlugin = require("html-webpack-plugin");

// ROOT_DIR represents the absolute path relative to package.json:
const ROOT_DIR = path.resolve(__dirname, "../../");

// cf. https://webpack.js.org/ for webpack documentation:
const base = {
	// context represents the base directory for resolving entry points and loaders from configuration
	// Even if context is defined, all config cannot be set via a relative path to context (like output.path that must be an absolute path).
	// By default context uses the current directory on which config is set.
	// But it's recommended to pass a value like the root package.json dir;
	// This makes the configuration independent from CWD:
	context: ROOT_DIR,
	module: {
		rules: [
			{
				test: /\.js[x]?$/,
				// We make sure that babel-loader is transforming as few files as possible:
				// No needs to re-transform already transformed production ready modules
				// (e.g inside node_modules):
				exclude: /node_modules/,
				use: {
					loader: "babel-loader",
					options: {
						// This will cache transformations to the filesystem
						// resulting in a speed up for next transformations:
						cacheDirectory: true
					}
				}
			},
			{
				test: /\.(jp[e]?g|png|gif|svg|ico|eot|ttf|woff|woff2|otf)$/i,
				use: {
					loader: "file-loader",
					options: {
						name: "assets/[name].[hash].[ext]"
						// TODO emitFile for server side https://github.com/webpack-contrib/file-loader#emitfile
					}
				}
			}
		]
	},
	resolve: {
		alias: {
			public: path.join(ROOT_DIR, "./public")
		},
		modules: [
			path.join(ROOT_DIR, "./src"),
			path.join(ROOT_DIR, "./src/shared"), // TODO to remove when bootstrap OK
			"node_modules"
		],
		extensions: [".js", ".jsx"]
	}
};

const cssLoaders = [
	{
		loader: "css-loader",
		// TODO css-loader/locals for server side https://github.com/dferber90/fake-style-loader/issues/3
		options: {
			modules: true,
			minimize: true,
			importLoaders: 1,
			localIdentName: "[name]__[local]___[hash:base64:5]"
		}
	},
	{
		loader: "postcss-loader",
		options: {
			plugins: [
				// postcss-cssnext already includes postcss-nested:
				// same for autoprefixer
				// see. http://cssnext.io/features/
				require("postcss-cssnext")({
					// autoprefixer browsers env:
					browsers: ["> 1%", "last 2 versions"]
				})
			]
		}
	}
];

const baseClient = merge(
	{
		name: "client",
		target: "web",
		entry: {
			// The key is the chunk name. The value can be a string or an array.
			// But for merging purpose, I used to give an array as value to allow webpack-merge
			// to easily merge value into the array (for hmr entries for example).
			app: ["./src/client"]
		},
		output: {
			path: path.join(ROOT_DIR, "./dist/public")
		},
		plugins: [
			new HtmlWebpackPlugin({
				template: "./public/template.html",
				favicon: "./public/favicon.ico",
				minify: {
					removeComments: false,
					collapseWhitespace: true,
					preserveLineBreaks: false
				}
			})
		]
	},
	base
);

const baseServer = merge(
	{
		name: "server",
		target: "node",
		node: {
			// cf. https://webpack.js.org/configuration/node/#node-__dirname
			// __dirname: false; allows to overwrite default behavior of __dirname
			// constants when __dirname is called inside a bundle generated by webpack
			// By default, it takes the "mock" value which corresponds to "/". By setting it to
			// true, __dirname is relative to the file which calls __dirname :)
			__dirname: true
		},
		externals: [
			/^[a-z\-0-9]+$/,
			{
				"react-dom/server": true // TODO check with react 16
			}
		],
		entry: {
			app: ["./src/server"]
		},
		output: {
			filename: "[name].js",
			path: path.join(ROOT_DIR, "./dist/server"),
			libraryTarget: "commonjs2"
		}
	},
	base
);

module.exports = {
	baseClient,
	baseServer,
	cssLoaders
};
